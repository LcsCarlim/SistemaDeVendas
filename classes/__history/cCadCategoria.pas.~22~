unit cCadCategoria;

interface

uses System.Classes,
     Vcl.Controls,
     Vcl.ExtCtrls,
     Vcl.Dialogs,
     ZAbstractConnection,
     ZConnection,
     ZAbstractRODataset,
     ZAbstractDataset,
     ZDataset,
     System.SysUtils;

type
  TCategoria = class
  private
    ConexaoDB:TZConnection;
    F_categoriaId:Integer;  //Int
    F_descricao:String;     //VarChar

    function getCodigo: Integer;
    function getDescricao: String;

    procedure setCodigo(const Value: Integer);
    procedure setDescricao(const Value: String);
  public
    constructor Create(aConexao:TZConnection);

    destructor Destroy; override;
    function Inserir:Boolean;
    function Atualizar:Boolean;
    function Apagar:Boolean;
    function Selecionar(id:Integer):Boolean;
  published
    property codigo:Integer   read getCodigo    write setCodigo;
    property descricao:String read getDescricao write setDescricao;
  end;

implementation

{ TCategoria }

{$region 'Constructor and Destructor'}
constructor TCategoria.Create(aConexao:TZConnection);
begin
  ConexaoDB:=aConexao;
end;

destructor TCategoria.Destroy;
begin
  inherited;
end;
{$endregion}

{$region 'CRUD'}
function TCategoria.Apagar: Boolean;
begin
  ShowMessage('Apagado');
  Result:= True;
end;

function TCategoria.Atualizar: Boolean;
begin
  ShowMessage('Atualizado');
  Result:= True;
end;

function TCategoria.Inserir: Boolean;
var Qry:TZQuery;
begin
  try
    Result:= True;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('INSERT INTO categorias (descricao) values (:descricao)');
    Qry.ParamByName('descricao').AsString :=Self.F_descricao;
    Try
      Qry.ExecSQL;
    Except
      Result:= False;
    end;
  finally
    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;
end;

function TCategoria.Selecionar(id: Integer): Boolean;
var Qry:TZQuery;
begin
  try
    Result:= True;
    Qry:=TZQuery.Create(nil);
    Qry.Connection:=ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('SELECT categoriaId, ' +
                '       descricao ' +
                ' FROM  categorias ' +
                'WHERE categoriaId=:categoriaId');
    Qry.ParamByName('categoriaId').AsInteger:=id;
    Try
      Qry.Open;

      Self.F_categoriaId:= Qry.FieldByName('categoriaId').AsInteger;
      Self.F_descricao:= Qry.FieldByName('descricao').AsString;
    Except
      Result:= False;
    End;
  finally
    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;
end;
{$endregion}

{$region 'Gets'}
function TCategoria.getCodigo: Integer;
begin
  Result := Self.F_categoriaId;
end;

function TCategoria.getDescricao: String;
begin
  Result := Self.F_descricao;
end;
{$endregion}

{$region 'Sets'}
procedure TCategoria.setCodigo(const Value: Integer);
begin
  Self.F_categoriaId := Value;
end;

procedure TCategoria.setDescricao(const Value: String);
begin
  Self.F_descricao := Value;
end;
{$endregion}

end.
